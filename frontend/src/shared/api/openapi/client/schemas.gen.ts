// This file is auto-generated by @hey-api/openapi-ts

export const UserSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'number',
<<<<<<< HEAD
			description: 'Уникальный идентификатор пользователя',
			example: 1
		},
		login: {
			type: 'string',
			description: 'Email адрес пользователя',
			example: 'ivanov@example.com'
=======
			description: 'Уникальный идентификатор пользователя'
		},
		login: {
			type: 'string',
			description: 'Email адрес пользователя'
>>>>>>> master
		},
		first_name: {
			type: 'string',
			example: 'Иван'
		},
		last_name: {
			type: 'string',
			example: 'Иванов'
		},
		middle_name: {
			type: 'string',
			example: 'Иванович'
		},
		role: {
			$ref: '#/components/schemas/UserRole'
		}
	},
<<<<<<< HEAD
	required: [ 'id', 'login', 'first_name', 'last_name', 'middle_name', 'role' ],
=======
	required: [ 'id', 'login', 'full_name', 'role' ],
>>>>>>> master
	description: 'Модель пользователя системы'
} as const

export const UserRoleSchema = {
	type: 'string',
	enum: [ 'ADMIN', 'EDITOR', 'VIEWER' ],
<<<<<<< HEAD
	example: 'ADMIN'
=======
	example: 'VIEWER'
>>>>>>> master
} as const

export const UserRequestBodySchema = {
	type: 'object',
	properties: {
		login: {
			type: 'string',
<<<<<<< HEAD
			description: 'Email адрес пользователя',
			example: 'petrov@example.com'
		},
		first_name: {
			type: 'string',
			example: 'Петр'
		},
		last_name: {
			type: 'string',
			example: 'Петров'
		},
		middle_name: {
			type: 'string',
			example: 'Петрович'
		},
		password: {
			type: 'string',
			example: 'securePassword123'
		},
=======
			description: 'Email адрес пользователя'
		},
		full_name: {
			type: 'string',
			example: 'Иван Иванов',
			description: 'Полное имя пользователя'
		},
		password: {
			type: 'string'
		},
>>>>>>> master
		role: {
			$ref: '#/components/schemas/UserRole'
		}
	},
<<<<<<< HEAD
	required: [ 'login', 'password', 'first_name', 'last_name', 'middle_name', 'role' ]
=======
	required: [ 'login', 'password', 'full_name', 'role' ]
>>>>>>> master
} as const

export const PaginationMetaSchema = {
	type: 'object',
	properties: {
		currentPage: {
			type: 'integer'
		},
		from: {
			type: 'integer'
		},
		lastPage: {
			type: 'integer'
		},
		perPage: {
			type: 'integer'
		},
		to: {
			type: 'integer'
		},
		total: {
			type: 'integer'
		}
	},
	required: [ 'from', 'lastPage', 'perPage', 'to', 'total', 'currentPage' ]
<<<<<<< HEAD
=======
} as const

export const TableSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			description: 'Уникальный идентификатор таблицы'
		},
		full_name: {
			type: 'string',
			example: 'Таблицы 1',
			description: 'Имя таблицы'
		}
	}
} as const

export const TableResponseBodySchema = {
	type: 'object',
	properties: {
		data: {
			$ref: '#/components/schemas/Table'
		}
	},
	required: ['data']
} as const

export const TableListResponseBodySchema = {
	type: 'object',
	properties: {
		data: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Table'
			}
		}
	},
	required: ['data']
} as const

export const TableRequestBodySchema = {
	type: 'object',
	properties: {
		data: {
			type: 'object',
			properties: {
				id: {
					type: 'number'
				},
				title: {
					type: 'string'
				}
			},
			required: ['id']
		}
	},
	required: ['data']
>>>>>>> master
} as const