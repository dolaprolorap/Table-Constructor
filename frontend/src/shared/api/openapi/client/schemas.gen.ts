// This file is auto-generated by @hey-api/openapi-ts

export const UserSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'number',
			description: 'Уникальный идентификатор пользователя',
			example: 1
		},
		login: {
			type: 'string',
			description: 'Email адрес пользователя',
			example: 'ivanov@example.com'
		},
		first_name: {
			type: 'string',
			example: 'Иван'
		},
		last_name: {
			type: 'string',
			example: 'Иванов'
		},
		middle_name: {
			type: 'string',
			example: 'Иванович'
		},
		role: {
			$ref: '#/components/schemas/UserRole'
		}
	},
	required: [ 'id', 'login', 'first_name', 'last_name', 'middle_name', 'role' ],
	description: 'Модель пользователя системы'
} as const

export const UserRoleSchema = {
	type: 'string',
	enum: [ 'ADMIN', 'EDITOR', 'VIEWER' ],
	example: 'ADMIN'
} as const

export const UserRequestBodySchema = {
	type: 'object',
	properties: {
		data: {
			type: 'object',
			properties: {
				login: {
					type: 'string',
					description: 'Email адрес пользователя',
					example: 'petrov@example.com'
				},
				first_name: {
					type: 'string',
					example: 'Петр'
				},
				last_name: {
					type: 'string',
					example: 'Петров'
				},
				middle_name: {
					type: 'string',
					example: 'Петрович'
				},
				password: {
					type: 'string',
					example: 'securePassword123'
				},
				role: {
					$ref: '#/components/schemas/UserRole'
				}
			},
			required: [ 'login', 'password', 'first_name', 'last_name', 'middle_name', 'role' ]
		}
	},
	required: ['data']
} as const

export const PaginationMetaSchema = {
	type: 'object',
	properties: {
		currentPage: {
			type: 'integer'
		},
		from: {
			type: 'integer'
		},
		lastPage: {
			type: 'integer'
		},
		perPage: {
			type: 'integer'
		},
		to: {
			type: 'integer'
		},
		total: {
			type: 'integer'
		}
	},
	required: [ 'from', 'lastPage', 'perPage', 'to', 'total', 'currentPage' ]
} as const

export const TableSchema = {
	type: 'object',
	properties: {
		id: {
			type: 'integer',
			description: 'Уникальный идентификатор таблицы'
		},
		title: {
			type: 'string',
			example: 'Таблицы 1',
			description: 'Имя таблицы'
		}
	},
	required: [ 'id', 'title' ]
} as const

export const TableResponseBodySchema = {
	type: 'object',
	properties: {
		data: {
			allOf: [
				{
					$ref: '#/components/schemas/Table'
				},
				{
					type: 'object',
					properties: {
						columns: {
							type: 'array',
							items: {
								$ref: '#/components/schemas/Columns'
							}
						}
					},
					required: ['columns']
				}
			]
		}
	},
	required: ['data']
} as const

export const TableListResponseBodySchema = {
	type: 'object',
	properties: {
		data: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Table'
			}
		},
		meta: {
			$ref: '#/components/schemas/PaginationMeta'
		}
	},
	required: [ 'data', 'meta' ]
} as const

export const TableRequestBodySchema = {
	type: 'object',
	properties: {
		data: {
			type: 'object',
			properties: {
				title: {
					type: 'string'
				}
			},
			required: ['id']
		}
	},
	required: ['data']
} as const

export const TableCreateRequestBodySchema = {
	type: 'object',
	properties: {
		data: {
			type: 'object',
			properties: {
				title: {
					type: 'string'
				},
				columns: {
					type: 'array',
					items: {
						type: 'object',
						properties: {
							title: {
								type: 'string'
							},
							type: {
								type: 'string',
								enum: [ 'string', 'number', 'timestamp', 'enum' ]
							},
							enum: {
								oneOf: null,
								type: 'array',
								nullable: true,
								items: {
									type: 'string'
								}
							}
						},
						required: [ 'title', 'type', 'enum' ]
					}
				}
			},
			required: [ 'title', 'columns' ]
		}
	},
	required: ['data']
} as const

export const ColumnsSchema = {
	type: 'object',
	additionalProperties: false,
	properties: {
		id: {
			type: 'integer',
			description: 'Уникальный идентификатор колонки'
		},
		table_id: {
			type: 'integer',
			description: 'Внешний ключ таблицы'
		},
		title: {
			type: 'string',
			description: 'Название колонки'
		},
		type: {
			type: 'string',
			enum: [ 'string', 'number', 'timestamp', 'enum' ]
		},
		enum: {
			type: 'array',
			items: {
				type: 'string'
			}
		}
	},
	required: [ 'id', 'table_id', 'title', 'type' ]
} as const

export const ColumnResponseBodySchema = {
	type: 'object',
	additionalProperties: false,
	properties: {
		data: {
			$ref: '#/components/schemas/Columns'
		}
	},
	required: ['data']
} as const

export const ColumnListResponseBodySchema = {
	type: 'object',
	additionalProperties: false,
	properties: {
		data: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Columns'
			}
		}
	},
	required: ['data']
} as const

export const ColumnRequestBodySchema = {
	type: 'object',
	additionalProperties: false,
	properties: {
		data: {
			type: 'object',
			additionalProperties: false,
			properties: {
				table_id: {
					type: 'integer',
					description: 'Внешний ключ таблицы'
				},
				title: {
					type: 'string',
					description: 'Название колонки'
				},
				type: {
					type: 'string',
					enum: [ 'string', 'number', 'timestamp', 'enum' ]
				},
				enum: {
					type: 'array',
					items: {
						type: 'string'
					}
				}
			},
			required: [ 'table_id', 'title', 'type' ]
		}
	},
	required: ['data']
} as const

export const RowsSchema = {
	type: 'object',
	additionalProperties: false,
	properties: {
		id: {
			type: 'integer',
			description: 'Уникальный идентификатор строки'
		},
		table_id: {
			type: 'integer',
			description: 'Идентификатор таблицы'
		},
		data: {
			type: 'array',
			items: {
				type: 'object',
				properties: {
					column_id: {
						type: 'integer',
						description: 'Внешний ключ на строку'
					},
					data: {
						type: 'string',
						description: 'Данные ячейки'
					}
				},
				required: [ 'column_id', 'data' ]
			}
		},
		created_at: {
			type: 'string'
		},
		created_by: {
			type: 'string'
		},
		deleted_at: {
			type: 'string',
			nullable: true
		},
		deleted_by: {
			type: 'string',
			nullable: true
		}
	},
	required: [ 'id', 'table_id', 'data', 'created_at', 'created_by' ]
} as const

export const RowsResponseBodySchema = {
	type: 'object',
	additionalProperties: false,
	properties: {
		data: {
			$ref: '#/components/schemas/Rows'
		}
	},
	required: ['data']
} as const

export const RowListResponseBodySchema = {
	type: 'object',
	additionalProperties: false,
	properties: {
		data: {
			type: 'array',
			items: {
				$ref: '#/components/schemas/Rows'
			}
		},
		meta: {
			$ref: '#/components/schemas/PaginationMeta'
		}
	},
	required: [ 'data', 'meta' ]
} as const

export const RowRequestBodySchema = {
	type: 'object',
	additionalProperties: false,
	properties: {
		data: {
			type: 'object',
			additionalProperties: false,
			properties: {
				table_id: {
					type: 'integer',
					description: 'Идентификатор таблицы'
				},
				data: {
					type: 'array',
					items: {
						$ref: '#/components/schemas/Rows/properties/data/items'
					}
				}
			},
			required: [ 'data', 'table_id' ]
		}
	},
	required: ['data']
} as const