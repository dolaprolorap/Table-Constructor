// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios'

import type { UserLoginData, UserLoginError, UserLoginResponse, UserLogoutError, UserLogoutResponse, GetUsersData, GetUsersError, GetUsersResponse, AddUserData, AddUserError, AddUserResponse, DeleteUserData, DeleteUserError, DeleteUserResponse, GetAllTablesData, GetAllTablesError, GetAllTablesResponse, CreateTableData, CreateTableError, CreateTableResponse, GetTabletByIdData, GetTabletByIdError, GetTabletByIdResponse, UpdateTableData, UpdateTableError, UpdateTableResponse, DeleteTablesData, DeleteTablesError, DeleteTablesResponse, CreateColumnData, CreateColumnError, CreateColumnResponse, UpdateColumnsData, UpdateColumnsError, UpdateColumnsResponse, DeleteColumnsData, DeleteColumnsError, DeleteColumnsResponse } from './types.gen'

export const client = createClient(createConfig())

export class AuthService {
	public static userLogin<ThrowOnError extends boolean = false>(options: Options<UserLoginData, ThrowOnError>) {
		return (options?.client ?? client).post<UserLoginResponse, UserLoginError, ThrowOnError>({
			...options,
			url: '/auth/login'
		})
	}

	public static userLogout<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
		return (options?.client ?? client).post<UserLogoutResponse, UserLogoutError, ThrowOnError>({
			...options,
			url: '/auth/logout'
		})
	}

}

export class UsersService {
	public static getUsers<ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) {
		return (options?.client ?? client).get<GetUsersResponse, GetUsersError, ThrowOnError>({
			...options,
			url: '/users'
		})
	}

	public static addUser<ThrowOnError extends boolean = false>(options: Options<AddUserData, ThrowOnError>) {
		return (options?.client ?? client).post<AddUserResponse, AddUserError, ThrowOnError>({
			...options,
			url: '/users'
		})
	}

	public static deleteUser<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
		return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
			...options,
			url: '/users/{id}'
		})
	}

}

export class TablesService {

	/**
	 * Get all tables
	 */
	public static getAllTables<ThrowOnError extends boolean = false>(options?: Options<GetAllTablesData, ThrowOnError>) {
		return (options?.client ?? client).get<GetAllTablesResponse, GetAllTablesError, ThrowOnError>({
			...options,
			url: '/tables'
		})
	}

	/**
	 * Create new table
	 */
	public static createTable<ThrowOnError extends boolean = false>(options: Options<CreateTableData, ThrowOnError>) {
		return (options?.client ?? client).post<CreateTableResponse, CreateTableError, ThrowOnError>({
			...options,
			url: '/tables'
		})
	}

	/**
	 * Gets the table by id
	 */
	public static getTabletById<ThrowOnError extends boolean = false>(options: Options<GetTabletByIdData, ThrowOnError>) {
		return (options?.client ?? client).get<GetTabletByIdResponse, GetTabletByIdError, ThrowOnError>({
			...options,
			url: '/tables/{id}'
		})
	}

	/**
	 * Updates table
	 */
	public static updateTable<ThrowOnError extends boolean = false>(options: Options<UpdateTableData, ThrowOnError>) {
		return (options?.client ?? client).put<UpdateTableResponse, UpdateTableError, ThrowOnError>({
			...options,
			url: '/tables/{id}'
		})
	}

	/**
	 * Deletes tables
	 */
	public static deleteTables<ThrowOnError extends boolean = false>(options: Options<DeleteTablesData, ThrowOnError>) {
		return (options?.client ?? client).delete<DeleteTablesResponse, DeleteTablesError, ThrowOnError>({
			...options,
			url: '/tables/{id}'
		})
	}

}

export class ColumnsService {

	/**
	 * Create new column
	 */
	public static createColumn<ThrowOnError extends boolean = false>(options: Options<CreateColumnData, ThrowOnError>) {
		return (options?.client ?? client).post<CreateColumnResponse, CreateColumnError, ThrowOnError>({
			...options,
			url: '/columns'
		})
	}

	/**
	 * Updates columns
	 */
	public static updateColumns<ThrowOnError extends boolean = false>(options: Options<UpdateColumnsData, ThrowOnError>) {
		return (options?.client ?? client).put<UpdateColumnsResponse, UpdateColumnsError, ThrowOnError>({
			...options,
			url: '/columns/{id}'
		})
	}

	/**
	 * Deletes columns
	 */
	public static deleteColumns<ThrowOnError extends boolean = false>(options: Options<DeleteColumnsData, ThrowOnError>) {
		return (options?.client ?? client).delete<DeleteColumnsResponse, DeleteColumnsError, ThrowOnError>({
			...options,
			url: '/columns/{id}'
		})
	}

}